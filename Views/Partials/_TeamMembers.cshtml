@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models;
@using Umbraco.Cms.Core.Models.Blocks;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

<div class='container-fluid team-members'>
    <div class='container d-block'>
        <div class='header'>Meet Our Team</div>
    </div>
    <div class='container headliner'>
        <div><h3>Experience Team Members</h3></div>
        <div class='team-btn'>
            <button>Browse Team&nbsp;&nbsp;<i class="fa-solid fa-arrow-up-right"></i></button>
        </div>
    </div>

    <div class='container member-grid'>

        @{
            var variants = Model.Value<IEnumerable<BlockListItem>>("team").Select(x => x.Content).ToList();
            for (int i = 0; i < variants.Count; i++)
            {
                if (i % 4 == 0)
                {
                    @:<div class="slideGroup customFade">
                }

                IPublishedContent teamImageContent = variants[i].Value<IPublishedContent>("teamImage");
                string teamImageUrl = teamImageContent?.Url();
             
                    <div class="mySlides">
                       <a href="/">
                        <div class="card">
                            <img src="@teamImageUrl" alt="@variants[i].Value("teamName")" />
                            <div class="card-body">
                                <h5 class="card-title">@variants[i].Value("teamName")</h5>
                                <p class="card-text">@variants[i].Value("teamTitle")</p>
                            </div>
                        </div>
                            </a>
                    </div>
            

                if ((i + 1) % 4 == 0 || i == variants.Count - 1)
                {
                    @:</div>
                }
            }
        }

    </div>
    <div class="container d-flex justify-content-center">
    <div class="pagination">
        @{
            int totalGroups = (int)Math.Ceiling((double)variants.Count / 4);
            for (int i = 1; i <= totalGroups; i++)
            {
                <span class="dot" onclick="currentGroup(@i)"></span>
            }
        }
    </div>
    </div>

</div>


<script>

var groupIndex = 1; // Start at the first slide
var timer = null;
var slideInterval = 20000;  // 20 seconds

function showSlides() {
    var groups = document.getElementsByClassName("slideGroup");
    for (var i = 0; i < groups.length; i++) {
        groups[i].classList.remove("show");
    }
    if (groupIndex > groups.length) { groupIndex = 1 }
    groups[groupIndex - 1].classList.add("show");
    setActiveDot(groupIndex);
    groupIndex++;
}

function setActiveDot(number) {
    var dots = document.getElementsByClassName("dot");
    for (var i = 0; i < dots.length; i++) {
        dots[i].className = dots[i].className.replace(" active", "");
    }
    if (dots[number - 1]) {
        dots[number - 1].className += " active";
    }
}

function currentGroup(n) {
    clearInterval(timer);
    var groups = document.getElementsByClassName("slideGroup");
    for (var i = 0; i < groups.length; i++) {
        groups[i].classList.remove("show");
    }
    groups[n - 1].classList.add("show");
    groupIndex = n + 1; // Next slide to show after this will be the next slide group
    setActiveDot(n);
    timer = setInterval(showSlides, slideInterval);
}

document.querySelector('.member-grid').addEventListener('mouseover', function () {
    clearInterval(timer);  // Stops the interval
});

document.querySelector('.member-grid').addEventListener('mouseout', function () {
    timer = setInterval(showSlides, slideInterval);  // Starts the interval
});

// Starts the interval when the page loads
timer = setInterval(showSlides, slideInterval);

// Show the first slideGroup initially
showSlides();



</script>


@*       @{

            var variants = Model.Value<IEnumerable<BlockListItem>>("team").Select(x => x.Content);
            foreach (var variant in variants)
            {
                IPublishedContent teamImageContent = variant.Value<IPublishedContent>("teamImage");
                string teamImageUrl = teamImageContent?.Url();
                <div class="member">
                    <div class="card">
                        <img src="@teamImageUrl" alt="@variant.Value("teamName")" />
                        <div class="card-body">
                            <h5 class="card-title">@variant.Value("teamName")</h5>
                            <p class="card-text">@variant.Value("teamTitle")</p>
                        </div>
                    </div>
                </div>

            }
        }
 *@